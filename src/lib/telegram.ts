// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Telegram Bot
const TELEGRAM_CONFIG = {
  BOT_TOKEN: '7932784712:AAGPJVEOYj4hvXTU7EcSd7VGTG9AOhssZAI',
  CHAT_ID: '343756634',
  API_URL: 'https://api.telegram.org/bot'
};

interface FormData {
  name: string;
  phone: string;
  childAge: string;
  message: string;
}

export const sendToTelegram = async (formData: FormData): Promise<boolean> => {
  try {
    const message = `üèÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ "–í–∏–∫–∏–Ω–≥–∏"

üë§ –ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è: ${formData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üë∂ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: ${formData.childAge}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}`;

    const response = await fetch(`${TELEGRAM_CONFIG.API_URL}${TELEGRAM_CONFIG.BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CONFIG.CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      })
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    return result.ok;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    return false;
  }
}; 