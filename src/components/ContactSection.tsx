import React, { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { toast } from '@/hooks/use-toast';
import { Phone, MessageSquare, MapPin, Clock, Send, ExternalLink } from 'lucide-react';

const ContactSection = () => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    childAge: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  const sendToTelegramBot = async (message: string) => {
    const BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
    const CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;

    if (!BOT_TOKEN || !CHAT_ID) {
      throw new Error('Telegram credentials not configured');
    }

    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Telegram API error: ${errorData.description || 'Unknown error'}`);
    }

    return await response.json();
  };

  const sendViaWebhook = async (message: string) => {
    const WEBHOOK_URL = import.meta.env.VITE_WEBHOOK_URL;
    
    if (!WEBHOOK_URL) {
      throw new Error('Webhook not configured');
    }

    const response = await fetch(WEBHOOK_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        message: message,
        name: formData.name,
        phone: formData.phone,
        childAge: formData.childAge,
        comment: formData.message,
        timestamp: new Date().toISOString()
      }),
    });

    if (!response.ok) {
      throw new Error('Webhook error');
    }

    return await response.json();
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = `üèÄ *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê –í–ò–ö–ò–ù–ì–ò*

üë§ *–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è:* ${formData.name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}
üë∂ *–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:* ${formData.childAge}
üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')} –≤ ${new Date().toLocaleTimeString('ru-RU')}

#–∑–∞—è–≤–∫–∞ #–≤–∏–∫–∏–Ω–≥–∏ #–±–∞—Å–∫–µ—Ç–±–æ–ª`;

      let success = false;

      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram Bot API
      try {
        await sendToTelegramBot(message);
        success = true;
        console.log('‚úÖ Message sent via Telegram Bot API');
      } catch (error) {
        console.warn('‚ùå Telegram Bot API failed:', error);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ webhook
        try {
          await sendViaWebhook(message);
          success = true;
          console.log('‚úÖ Message sent via webhook');
        } catch (webhookError) {
          console.warn('‚ùå Webhook failed:', webhookError);
        }
      }

      if (success) {
        toast({
          title: "üéâ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
          description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          name: '',
          phone: '',
          childAge: '',
          message: ''
        });
      } else {
        // –ù–∞–¥–µ–∂–Ω—ã–π fallback: –æ—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —Å –≥–æ—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        const telegramUrl = `https://t.me/basketballvikings?text=${encodeURIComponent(message)}`;
        window.open(telegramUrl, '_blank');
        
        toast({
          title: "üì± –ü–µ—Ä–µ—Ö–æ–¥ –≤ Telegram",
          description: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!",
          action: (
            <Button 
              variant="outline" 
              size="sm"
              onClick={() => window.open(telegramUrl, '_blank')}
            >
              <ExternalLink className="w-4 h-4 mr-1" />
              –û—Ç–∫—Ä—ã—Ç—å Telegram
            </Button>
          ),
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setFormData({
          name: '',
          phone: '',
          childAge: '',
          message: ''
        });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã:', error);
      
      // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback
      const simpleMessage = `üèÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –í–∏–∫–∏–Ω–≥–∏:

–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: ${formData.childAge}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
      
      const telegramUrl = `https://t.me/basketballvikings?text=${encodeURIComponent(simpleMessage)}`;
      window.open(telegramUrl, '_blank');
      
      toast({
        title: "üì± –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ Telegram",
        description: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏.",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
  const sendDirectToTelegram = () => {
    if (!formData.name || !formData.phone || !formData.childAge) {
      toast({
        title: "‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        description: "–ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –≤–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
      });
      return;
    }

    const message = `üèÄ –ó–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –í–∏–∫–∏–Ω–≥–∏:

üë§ –ò–º—è: ${formData.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üë∂ –í–æ–∑—Ä–∞—Å—Ç: ${formData.childAge}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;

    const telegramUrl = `https://t.me/basketballvikings?text=${encodeURIComponent(message)}`;
    window.open(telegramUrl, '_blank');
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ dev —Ä–µ–∂–∏–º–µ
  const BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
  const CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;
  const WEBHOOK_URL = import.meta.env.VITE_WEBHOOK_URL;
  const isConfigured = (!!BOT_TOKEN && !!CHAT_ID) || !!WEBHOOK_URL;

  return (
    <section id="contact" className="py-20 bg-white">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16 animate-fade-in">
          <h2 className="text-4xl md:text-5xl font-russo mb-6">
            <span className="gradient-text">–ü–†–ò–°–û–ï–î–ò–ù–Ø–ô–¢–ï–°–¨</span>
          </h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            –ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
          </p>
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ */}
          {import.meta.env.DEV && (
            <div className="mt-4 p-3 bg-gray-100 rounded-lg max-w-md mx-auto">
              <p className="text-sm text-gray-600">
                <strong>Dev Mode:</strong> Integration {isConfigured ? '‚úÖ Configured' : '‚ùå Not Configured'}
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Bot: {!!BOT_TOKEN && !!CHAT_ID ? '‚úÖ' : '‚ùå'} | 
                Webhook: {!!WEBHOOK_URL ? '‚úÖ' : '‚ùå'}
              </p>
            </div>
          )}
        </div>

        <div className="grid lg:grid-cols-2 gap-12 items-start">
          <div className="animate-fade-in">
            <Card className="card-gradient border-viking-orange/20">
              <CardContent className="p-8">
                <div className="space-y-4">
                  <div className="flex items-center space-x-3">
                    <MessageSquare className="w-6 h-6 text-viking-orange" />
                    <div>
                      <div className="font-medium text-gray-800">Telegram</div>
                      <a href="https://t.me/basketballvikings" target="_blank" rel="noopener noreferrer" className="text-viking-orange hover:text-viking-red transition-colors">@basketballvikings</a>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Phone className="w-6 h-6 text-viking-orange" />
                    <div>
                      <div className="font-medium text-gray-800">–¢–µ–ª–µ—Ñ–æ–Ω</div>
                      <div className="text-gray-600">+7 (XXX) XXX-XX-XX</div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <MapPin className="w-6 h-6 text-viking-orange" />
                    <div>
                      <div className="font-medium text-gray-800">–û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏</div>
                      <div className="text-gray-600">
                        –°–ö –í–æ—Å—Ç–æ–∫-–°–ø–æ—Ä—Ç<br />
                        —É–ª. –õ–µ–π—Ç–µ–Ω–∞–Ω—Ç–∞ –®–º–∏–¥—Ç–∞ –¥.17
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Clock className="w-6 h-6 text-viking-orange" />
                    <div>
                      <div className="font-medium text-gray-800">–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</div>
                      <div className="text-gray-600">–ü–Ω, –°—Ä, –ü—Ç: 16:00-20:00<br />–°–±: 10:00-14:00</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          <div className="animate-scale-in">
            <Card className="card-gradient border-viking-orange/20">
              <CardContent className="p-8">
                <h3 className="text-2xl font-bold mb-6 text-viking-orange">–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</h3>
                <form onSubmit={handleSubmit} className="space-y-4">
                  <Input
                    id="name"
                    name="name"
                    type="text"
                    placeholder="–ò–º—è —Ä–æ–¥–∏—Ç–µ–ª—è *"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    className="bg-white/80 focus:bg-white border border-viking-orange/30 rounded-lg px-4 py-3 text-base text-gray-900 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-viking-orange/40 transition"
                  />
                  <Input
                    id="phone"
                    name="phone"
                    type="tel"
                    placeholder="–¢–µ–ª–µ—Ñ–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 123 456-78-90) *"
                    value={formData.phone}
                    onChange={handleInputChange}
                    required
                    className="bg-white/80 focus:bg-white border border-viking-orange/30 rounded-lg px-4 py-3 text-base text-gray-900 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-viking-orange/40 transition"
                  />
                  <Input
                    id="childAge"
                    name="childAge"
                    type="text"
                    placeholder="–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞ *"
                    value={formData.childAge}
                    onChange={handleInputChange}
                    required
                    className="bg-white/80 focus:bg-white border border-viking-orange/30 rounded-lg px-4 py-3 text-base text-gray-900 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-viking-orange/40 transition"
                  />
                  <Textarea
                    id="message"
                    name="message"
                    placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–æ–ø—ã—Ç –∏–≥—Ä—ã, –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ —Ç.–¥.)"
                    value={formData.message}
                    onChange={handleInputChange}
                    className="bg-white/80 focus:bg-white border border-viking-orange/30 rounded-lg px-4 py-3 text-base text-gray-900 placeholder-gray-400 shadow-sm focus:ring-2 focus:ring-viking-orange/40 transition min-h-[80px]"
                  />
                  
                  {/* –î–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
                  <div className="grid grid-cols-1 gap-3 mt-6">
                    <Button 
                      type="submit" 
                      disabled={isSubmitting}
                      className="w-full bg-viking-orange hover:bg-viking-red text-white font-bold py-3 rounded-lg transition-all flex items-center justify-center gap-2 text-base shadow-md disabled:opacity-50"
                    >
                      <Send className="w-5 h-5" />
                      {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
                    </Button>
                    
                    <Button 
                      type="button"
                      variant="outline"
                      onClick={sendDirectToTelegram}
                      className="w-full border-viking-orange text-viking-orange hover:bg-viking-orange hover:text-white py-3 rounded-lg transition-all flex items-center justify-center gap-2 text-base"
                    >
                      <MessageSquare className="w-5 h-5" />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ Telegram
                    </Button>
                  </div>
                </form>
                
                <p className="text-sm text-gray-500 mt-4 text-center">
                  * –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </section>
  );
};

export default ContactSection;
